{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/koiketakuma/Documents/GitHub/rehabili-management-system/app/api/users/route.ts"],"sourcesContent":["// app/api/users/route.ts\nimport { Database } from 'sqlite3';\nimport path from 'path';\n\n// SQLite データベースファイルを指定\nconst dbPath = path.resolve(process.cwd(), 'database.sqlite');\nconst db = new Database(dbPath);\n\n// 初回起動時にusersテーブルを作成\ndb.serialize(() => {\n    db.run(`\n        CREATE TABLE IF NOT EXISTS users (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            username TEXT NOT NULL,\n            email TEXT NOT NULL\n        )\n        `, (err) => {\n        if (err) {\n            console.error('Error creating table:', err);\n        } else {\n            console.log('Users table initialized');\n        }\n        });\n    });\n    \n\nexport async function GET(_request: Request) {\n    return new Promise<Response>((resolve, reject) => {\n        db.all('SELECT * FROM users', [], (err, rows) => {\n            if (err) {\n                console.error('Database error in GET:', err);\n                reject(new Response(JSON.stringify({ error: 'Database error in GET' }), { status: 500 }));\n            } else {\n                resolve(new Response(JSON.stringify(rows), { status: 200, headers: { 'Content-Type': 'application/json' } }));\n            }\n        });\n    });\n}\n\nexport async function POST(request: Request) {\n    console.log(\"リクエスト\",request.body);\n    const { username, email } = await request.json();\n    return new Promise<Response>((resolve, reject) => {\n        db.run(\n        'INSERT INTO users (username, email) VALUES (?, ?)',\n        [username, email],\n        function (err) {\n            if (err) {\n            reject(new Response(JSON.stringify({ error: 'Database error' }), { status: 500 }));\n            } else {\n            resolve(\n                new Response(\n                JSON.stringify({ id: this.lastID, username, email }),\n                { status: 201, headers: { 'Content-Type': 'application/json' } }\n                )\n            );\n            }\n        }\n        );\n    });\n    }\n"],"names":[],"mappings":"AAAA,yBAAyB;;;;;AACzB;AACA;;;AAEA,uBAAuB;AACvB,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI;AAC3C,MAAM,KAAK,IAAI,uGAAA,CAAA,WAAQ,CAAC;AAExB,qBAAqB;AACrB,GAAG,SAAS,CAAC;IACT,GAAG,GAAG,CAAC,CAAC;;;;;;QAMJ,CAAC,EAAE,CAAC;QACJ,IAAI,KAAK;YACL,QAAQ,KAAK,CAAC,yBAAyB;QAC3C,OAAO;YACH,QAAQ,GAAG,CAAC;QAChB;IACA;AACJ;AAGG,eAAe,IAAI,QAAiB;IACvC,OAAO,IAAI,QAAkB,CAAC,SAAS;QACnC,GAAG,GAAG,CAAC,uBAAuB,EAAE,EAAE,CAAC,KAAK;YACpC,IAAI,KAAK;gBACL,QAAQ,KAAK,CAAC,0BAA0B;gBACxC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;oBAAE,OAAO;gBAAwB,IAAI;oBAAE,QAAQ;gBAAI;YAC1F,OAAO;gBACH,QAAQ,IAAI,SAAS,KAAK,SAAS,CAAC,OAAO;oBAAE,QAAQ;oBAAK,SAAS;wBAAE,gBAAgB;oBAAmB;gBAAE;YAC9G;QACJ;IACJ;AACJ;AAEO,eAAe,KAAK,OAAgB;IACvC,QAAQ,GAAG,CAAC,SAAQ,QAAQ,IAAI;IAChC,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,MAAM,QAAQ,IAAI;IAC9C,OAAO,IAAI,QAAkB,CAAC,SAAS;QACnC,GAAG,GAAG,CACN,qDACA;YAAC;YAAU;SAAM,EACjB,SAAU,GAAG;YACT,IAAI,KAAK;gBACT,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;oBAAE,OAAO;gBAAiB,IAAI;oBAAE,QAAQ;gBAAI;YAC/E,OAAO;gBACP,QACI,IAAI,SACJ,KAAK,SAAS,CAAC;oBAAE,IAAI,IAAI,CAAC,MAAM;oBAAE;oBAAU;gBAAM,IAClD;oBAAE,QAAQ;oBAAK,SAAS;wBAAE,gBAAgB;oBAAmB;gBAAE;YAGnE;QACJ;IAEJ;AACA"}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}